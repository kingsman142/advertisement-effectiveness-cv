%% Visualize objects-based memorability map script

addpath('/Users/Phillip/Documents/Research/Image Memorability/MATLAB code/Analysis/Prediction/libsvm-mat-3.0-1');
addpath('/Users/Phillip/Documents/Research/Image Memorability/MATLAB code/Analysis/Memorability map/Object-based map/');

cd '/Users/Phillip/Documents/Research/Image Memorability/MATLAB code/Analysis/Prediction/version_2010_aug_8/'
load datamem     % load annotations, stats, and precomputed descriptors (this file is generated by the script memory.m)
load('/Users/Phillip/Documents/Research/Image Memorability/Results/expt results/Matlab structured data/sorted_target_data.mat');


%% extract hits and misses
N = length(sorted_target_data);
hits = zeros(N,1);
misses = zeros(N,1);
for i=1:N
    hits(i) =  sorted_target_data{i}.hits;
    misses(i) = sorted_target_data{i}.misses;
end


%% only use objects that appear in more than appearances_thresh images
%appearances_thresh = 5;
%use_mask = sum(Counts,2)>appearances_thresh;


%% build feature vector for each image
features = Counts'>0;
which_images = 1:2222; % exclude textures
features = features(which_images,:);
features = features./repmat(sum(features,2),[1,size(features,2)]);


%% build label vector
labels = double((hits./(hits+misses)));
labels = labels(which_images);


%% break into train and test sets
%[train_data, train_label, test_data, test_label, train_indices, test_indices] = SplitTrainTest(labels, features);
load('/Users/Phillip/Documents/Research/Image Memorability/MATLAB code/Analysis/train_indices.mat');
load('/Users/Phillip/Documents/Research/Image Memorability/MATLAB code/Analysis/test_indices.mat');
train_data = features(train_indices,:);
test_data = features(test_indices,:);
train_label = labels(train_indices);
test_label = labels(test_indices);

test_img = img(:,:,:,test_indices);
test_segments = segments(:,:,test_indices);


%% build kernel
param.type = 'histintersection';
K_train = kernel(train_data, train_data, param);
K_train = double([(1:size(train_data,1))', K_train]); % include sample serial number as first column


%% train model
model = svmtrain(double(train_label), K_train, '-t 4 -s 3 -c 0.1 -p 0.01');


%% make prediction with all features
K_test = kernel(test_data, train_data, param);
K_test = double([(1:size(test_data,1))', K_test]);

[predictions1, accuracy, dec_value] = svmpredict(double(test_label), K_test, model);


%% calc object scores

%which_images = [800 900 1000 1100];
[p i] = sort(test_label,'descend');
which_images = i(11:150:end);
%which_images = 1:size(test_data,1);

num_images = length(which_images);

object_scores = nan(size(Counts,1)+1,num_images);

for i=1:num_images

    curr_test_data = test_data(which_images(i),:);
    
    which_objects = find(curr_test_data~=0);
    
    for j=1:length(which_objects)
        object_scores(which_objects(j)+1,i) = CalcObjectExclusionFactor(train_data, curr_test_data, predictions1(which_images(i)), param, model, int16(which_objects(j)));
    end
        
end

%% calc average object scores aggregated over all images containing each
%% object
%{
avg_object_scores = zeros(size(object_scores,1),1);
for i=1:length(avg_object_scores)
    curr_object_scores = object_scores(i,:);
    which_scores = find(~isnan(curr_object_scores));
    if (isempty(which_scores))
        avg_object_scores(i) = nan; % change this to zero for sorting below
    else
        avg_object_scores(i) = mean(curr_object_scores(which_scores));
    end
end

object_exclusion_scores = avg_object_scores;
save('/Users/Phillip/Documents/Research/Image Memorability/MATLAB code/Analysis/Feature analysis/object_exclusion_scores','object_exclusion_scores');

% remove nans first here!
[s i] = sort([avg_object_scores(2:end)],'descend');
sorted_objectnames = cell(size(i));
for j=1:length(i)
    sorted_objectnames{j} = objectnames{i(j)};
end
sorted_objectnames(1:20)
sorted_objectnames((end-20):end)
%}

% calc normalized scale for display
pos_scores = object_scores.*(object_scores>=0);
neg_scores = object_scores.*(object_scores<0);

scale_pos = [min(pos_scores(:)) max(pos_scores(:))];
scale_neg = [max(neg_scores(:)) abs(min(neg_scores(:)))];

% display
for i=1:num_images
    
    subplot(2,num_images,i);
    VisualizeMemorabilityMapObjects(test_segments(:,:,which_images(i)), object_scores(:,i), scale_pos, scale_neg);
    title(sprintf('pred = %g',predictions1(which_images(i))));
    
    subplot(2,num_images,i+num_images);
    imshow(test_img(:,:,:,which_images(i)));
    title(sprintf('actual = %g',test_label(which_images(i))));
end




